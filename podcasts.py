import sys
import os
import time
import mimetypes
import urllib
from werkzeug.wrappers import Request, Response

VIDEO_DIR = "/var/videos"
VIDEO_WEB_PATH = "http://example.com/videos/"

# Podcast metadata
TITLE = "Video Podcast"
URL = "http://example.com/podcast"

class XmlNode(object):
	def __init__(self, name, *args, **kwargs):
		self._name = name
		self._children = []
		self._attributes = {}
		self._value = ""
		if len(args) == 1:
			self._value = args[0]

		for k,v in kwargs.items():
			self._attributes[k] = v

	def set_value(self, value):
		self._value = value

	def add_child(self, child):
		self._children.append(child)

	def __str__(self):
		s = "<%s " % self._name
		s += " ".join(["%s='%s'" % (k,v) for k,v in self._attributes.items()])
		s += ">"
		if self._children:
			s += "\n"
			s += "\n".join([str(c) for c in self._children])
			s += "\n"
		else:
			s += self._value
		s += "</%s>" % self._name
		return s

@Request.application
def application(request):
	rss = XmlNode("rss", version="2.0")
	channel = XmlNode("channel")
	rss.add_child(channel)
	channel.add_child(XmlNode("title", TITLE))
	channel.add_child(XmlNode("description", "Autogenerated podcast"))
	channel.add_child(XmlNode("link", URL))
	channel.add_child(XmlNode("language", "en-us"))

	for path in [p for p in os.listdir(VIDEO_DIR) if not p.startswith(".")]:
		fullpath = os.path.join(VIDEO_WEB_PATH, urllib.pathname2url(path))
		item = XmlNode("item")
		item.add_child(XmlNode("title", os.path.splitext(path)[0]))
		item.add_child(XmlNode("link", fullpath))
		item.add_child(XmlNode("guid", fullpath))
		fspath = os.path.join(VIDEO_DIR, path)
		timestamp = time.localtime(os.path.getmtime(fspath))
		formatted = time.strftime("%a, %d %b %Y %H:%M:%S +0000", timestamp)
		item.add_child(XmlNode("pubDate", formatted))
		mimetype, encoding = mimetypes.guess_type(fspath)
		if not mimetype: mimetype = 'video/mpeg'
		item.add_child(XmlNode("enclosure", url=fullpath, length=os.path.getsize(fspath), type=mimetype))

		channel.add_child(item)

	xml = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n" + str(rss)
	return Response(xml, mimetype='application/rss+xml')

def main(args):
	from werkzeug.serving import run_simple
	run_simple('localhost', 4000, application)

if __name__ == "__main__":
	sys.exit(main(sys.argv))

